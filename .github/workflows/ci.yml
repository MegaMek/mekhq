# This workflow will build a Java project with Gradle
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-gradle

name: MekHQ CI with Gradle

#
# This Action Definition should be triggered only on
# Pull Requests being added/updated against master.
#
on:
  pull_request:
    branches: [ master ]

jobs:

  #
  # Perform CI (and CD as an artifact) of MekHQ
  # any time a pull request is added or updated.
  #
  ci_cd:
    
    # For CI/CD running on *nix is sufficient
    runs-on: ubuntu-latest

    steps:
    #
    # Checkout the Pull Request source
    # and put it in: ./mekhq
    #
    - uses: actions/checkout@v2
      with:
        path: mekhq

    #
    # Checkout the latest Megamek source
    # and put it in: ./megamek
    #
    # TODO: figure out if we can link up
    #       this with a "sister" branch
    #       in MegaMek.
    #
    - name: Checkout MegaMek
      uses: actions/checkout@v2
      with:
        repository: MegaMek/megamek
        path: megamek

    # branch name: github.event.pull_request.head.ref
    # repo: github.event.pull_request.head.repo.full_name
    - name: Echo event data
      run: |
        echo "The github context is:"
        echo "${{ toJson(github) }}"
        echo ""
        echo "The job context is:"
        echo "${{ toJson(job) }}"
        echo ""
        echo "The steps context is:"
        echo "${{ toJson(steps) }}"
        echo ""
        echo "The runner context is:"
        echo "${{ toJson(runner) }}"
        echo ""
        echo "The strategy context is:"
        echo "${{ toJson(strategy) }}"
        echo ""
        echo "The matrix context is:"
        echo "${{ toJson(matrix) }}"

    #
    # Checkout the latest MegaMekLab source
    # and put it in: ./megameklab
    #
    - name: Checkout MegaMekLab
      uses: actions/checkout@v2
      with:
        repository: MegaMek/megameklab
        path: megameklab

    - name: Set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8

    #
    # Make sure we can execute the Gradle wrapper        
    #
    - name: Grant execute permission for gradlew (*nix or MacOS)
      working-directory: mekhq  
      run: chmod +x gradlew

    #
    # Build the MekHQ project
    #
    # Directory layout:
    #    /mekhq
    #        /gradlew
    #    /megamek
    #    /megameklab
    #
    # Output Variables:
    #    - buildScanUri
    #
    - name: Build with Gradle
      id: gradle_build
      working-directory: mekhq
      run: ./gradlew -I .github/build-scan-init.gradle build --stacktrace --scan "-Dscan.link.VCS=${{ github.event.pull_request.html_url }}"
      
    #
    # If the build step fails, try to upload any
    # test logs in case it was a unit test failure.
    #
    # The logs will be relative to the ./mekhq directory.
    #
    - name: Upload Test Logs on Failure
      uses: actions/upload-artifact@v2-preview
      if: failure()
      with:
        name: cd-failure-logs
        path: ./mekhq/MekHQ/build/reports/

    #
    # If we have a buildScanUri comment on the PR
    #
    # NB: This only works if you're on the main MegaMek\mekhq repo
    #     for now due to a GitHub Actions limitation.
    #
    - name: Comment on PR with Build Scan URI
      uses: thollander/actions-comment-pull-request@master
      if: always() && steps.gradle_build.outputs.buildScanUri != ''
      with:
        message: Build scan available at ${{ steps.gradle_build.outputs.buildScanUri }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    #
    # Put the releases up in a single zip file called:
    #
    #     releases.zip
    #
    # NB: Due to a GitHub Actions limitation we won't know
    #     what the filename is in order to display it somewhere.
    #
    - name: Upload Releases
      uses: actions/upload-artifact@v2-preview
      with:
        name: releases
        path: ./mekhq/MekHQ/build/distributions/
        
  #
  # Confirm on Windows and MacOS that we can still
  # build and test MekHQ. This does use MegaMek or
  # MegaMekLab's source and exercises the Maven Repo.
  #
  other_os_ci:

    # Don't run this if we fail the previous job.
    needs: ci_cd

    # Run this job once for each combination in the
    # matrix below.
    strategy:
      matrix:
        os: [windows-latest, macOS-latest]

    runs-on: ${{ matrix.os }}

    steps:

    - uses: actions/checkout@v2

    #
    # TODO: consider making the Java Version part of the 
    #       maxtrix build options. IF we do that we should
    #       probably add ubuntu-latest to the OS matrix.
    #
    - name: Set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8
    
    # Don't run this for Windows.
    - name: Grant execute permission for gradlew (*nix or MacOS)
      run: chmod +x gradlew
      if: runner.os != 'Windows'
      
    # Include --stacktrace to make some build failures easier
    # to figure out.
    - name: Build with Gradle
      run: ./gradlew test --stacktrace

    - name: Upload Test Logs on Failure
      uses: actions/upload-artifact@v2-preview
      if: failure()
      with:
        name: ci-failure-logs
        path: MekHQ/build/reports/
