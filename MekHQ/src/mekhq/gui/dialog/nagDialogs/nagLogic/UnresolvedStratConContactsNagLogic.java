/*
 * Copyright (C) 2024-2025 The MegaMek Team. All Rights Reserved.
 *
 * This file is part of MekHQ.
 *
 * MekHQ is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License (GPL),
 * version 3 or (at your option) any later version,
 * as published by the Free Software Foundation.
 *
 * MekHQ is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty
 * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 *
 * A copy of the GPL should have been included with this project;
 * if not, see <https://www.gnu.org/licenses/>.
 *
 * NOTICE: The MegaMek organization is a non-profit group of volunteers
 * creating free software for the BattleTech community.
 *
 * MechWarrior, BattleMech, `Mech and AeroTech are registered trademarks
 * of The Topps Company, Inc. All Rights Reserved.
 *
 * Catalyst Game Labs and the Catalyst Game Labs logo are trademarks of
 * InMediaRes Productions, LLC.
 */
package mekhq.gui.dialog.nagDialogs.nagLogic;

import static mekhq.utilities.MHQInternationalization.getFormattedTextAt;
import static mekhq.utilities.MHQInternationalization.getTextAt;

import java.time.LocalDate;
import java.util.List;

import mekhq.campaign.mission.AtBContract;
import mekhq.campaign.mission.AtBDynamicScenario;
import mekhq.campaign.stratcon.StratconScenario;
import mekhq.campaign.stratcon.StratconScenario.ScenarioState;
import mekhq.campaign.stratcon.StratconTrackState;

public class UnresolvedStratConContactsNagLogic {
    final static String RESOURCE_BUNDLE = "mekhq.resources.NagDialogs";

    /**
     * Determines if there are any unresolved StratCon contacts in the current campaign report.
     *
     * <p>This method checks the report generated by {@link #determineUnresolvedContacts(List, LocalDate)}
     * to see if it contains any unresolved contacts. If the report is not empty, it indicates that there are unresolved
     * StratCon scenarios, and the method returns {@code true}. Otherwise, it returns {@code false}.</p>
     *
     * @param activeContracts A list of active {@link AtBContract} objects to evaluate for unresolved scenarios.
     * @param today           The current campaign date used to filter scenarios by deployment date.
     *
     * @return {@code true} if there are unresolved StratCon contacts in the report; {@code false} otherwise.
     */
    public static boolean hasUnresolvedContacts(List<AtBContract> activeContracts, LocalDate today) {
        String unresolvedContactsReport = determineUnresolvedContacts(activeContracts, today);
        return !unresolvedContactsReport.isEmpty();
    }

    /**
     * Identifies unresolved StratCon contacts in the campaign and generates a detailed report.
     *
     * <p>This method analyzes all active AtB (Against the Bot) contracts in the campaign to locate unresolved
     * scenarios on their StratCon tracks. A scenario is considered unresolved if both of the following conditions are
     * true:</p>
     * <ul>
     *     <li>The scenario's current state is {@link ScenarioState#UNRESOLVED}.</li>
     *     <li>The scenario's deployment date matches the current campaign date.</li>
     * </ul>
     *
     * <p>For every unresolved scenario, a formatted report entry is generated, including details such as the scenario's name,
     * its associated contract, the track location, and whether it is marked as a Turning Point.</p>
     *
     * @param activeContracts A list of active {@link AtBContract} objects to be checked for unresolved scenarios.
     * @param today           The current campaign date used to filter scenarios by deployment date.
     *
     * @return A formatted HTML string summarizing all unresolved scenarios, with critical scenarios (e.g., Turning
     *       Points) marked.
     */
    public static String determineUnresolvedContacts(List<AtBContract> activeContracts, LocalDate today) {
        StringBuilder unresolvedContacts = new StringBuilder();

        // check every track attached to an active contract for unresolved scenarios
        // to which the player can deploy forces
        for (AtBContract contract : activeContracts) {
            if (contract.getStratconCampaignState() == null) {
                continue; // Skip contracts without a Stratcon campaign state
            }

            for (StratconTrackState track : contract.getStratconCampaignState().getTracks()) {
                for (StratconScenario scenario : track.getScenarios().values()) {
                    // Check if the scenario is unresolved and the deployment date matches the local date
                    if (scenario.getCurrentState() == ScenarioState.UNRESOLVED &&
                              today.equals(scenario.getDeploymentDate())) {

                        AtBDynamicScenario backingScenario = scenario.getBackingScenario();

                        // Determine if the scenario is special or a turning point
                        boolean isCrisis = backingScenario != null &&
                                                 backingScenario.getStratConScenarioType().isSpecial();
                        boolean isTurningPoint = scenario.isTurningPoint();

                        // Define the addendum text based on StratCon scenario type
                        String addendum;
                        if (isCrisis) {
                            addendum = getTextAt(RESOURCE_BUNDLE, "UnresolvedStratConContactsNagDialog.crisis");
                        } else if (isTurningPoint) {
                            addendum = getTextAt(RESOURCE_BUNDLE, "UnresolvedStratConContactsNagDialog.turningPoint");
                        } else {
                            addendum = ""; // No additional label if neither condition is true
                        }

                        // Append formatted unresolved scenario information
                        unresolvedContacts.append(getFormattedTextAt(RESOURCE_BUNDLE,
                              "UnresolvedStratConContactsNagDialog.report",
                              scenario.getName(),
                              contract.getName(),
                              track.getDisplayableName(),
                              scenario.getCoords().toBTString(),
                              addendum));
                    }
                }
            }
        }

        return unresolvedContacts.toString();
    }
}
