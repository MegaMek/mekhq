<?xml version="1.0"?>
<!-- Author: Jay Lawson -->
<!-- This is a packaging build file for MekHQ that will package           -->
<!-- the following OS-specific releases.                                  -->
<!--     a) An OS X bundled release                                       -->
<!--     b) A Windows release with the EXE file using launch4j            -->
<!--     c) A "unix" release containing only jars                         -->
<!--     d) A source-file only release to comply with GPL                 -->
<!-- Originally, the OS release was bundled with jarbundler, but I am     -->
<!-- now using a pre-packaged set of app directories that we just         -->
<!-- copy the newest jar files into. This allows for easier cutomization  -->
<!-- of the pinfo.list file to get the classpath to all of the jars       -->
<!-- correct. At the moment, I can't figure out how to get a classpath    -->
<!-- to the wrapped executable in the launch4j program so MM and MML      -->
<!-- in the windows release don't wrap the jar files but we do put them   -->
<!-- in the lib folder to keep them out of sight                          -->

<project default="release" name="MekHQ" basedir=".">

    <!-- Global properties for this build -->
    <!-- Version and packaging properties -->
    <property name="project.name" value="mekhq" />
    <property name="version" value="0.3.32-git"/>
    <property name="osxdist" value="${project.name}-${version}-mac" />
    <property name="windist" value="${project.name}-${version}-windows" />
    <property name="nixdist" value="${project.name}-${version}" />
    <property name="srcdist" value="${project.name}-${version}-source" />

    <property name="srcdir" value="src" />
    <property name="confdir" value="mmconf" />
    <property name="logdir" value="logs" />
    <property name="builddir" value="classes" />
    <property name="libdir" value="lib" />
    <property name="datadir" value="data" />
    <property name="apidocsdir" value="apidocs" />
    <property name="docdir" value="docs" />
    <property name="docmmdir" value="docs-mm" />
    <property name="docmmldir" value="docs-mml" />
    <property name="pkgdir" value="pkgdir" />
    <property name="mm-pkgdir" value="mm-pkgdir" />
    <property name="mml-pkgdir" value="mml-pkgdir" />
    <property name="localdir" value="localdev" />
    <property name="util" value="packaging_utils" />

    <!-- same as builddir but under git -->
    <property name="pkgbuilddir" value="${pkgdir}/${builddir}" />

    <!-- gitroot used for git authentification -->
    <property name="gitroot" value="https://github.com/MegaMek/mekhq.git" />
    <property name="mm-gitroot" value="https://github.com/MegaMek/megamek.git" />
    <property name="mml-gitroot" value="https://github.com/MegaMek/megameklab.git" />


    <property name="timestampfile" value="${logdir}/timestamp" />

    <!-- Name of the target jarfile and the class containing the main-Method -->
    <property name="jarfile" value="MekHQ.jar" />
    <property name="jarmainclass" value="mekhq.MekHQ" />

    <!-- This is the relative path to the 'data' directory -->
    <property name="dataclasspath" value="." />

    <condition property="isOsUnixLike">
        <os family="unix" />
    </condition>

    <condition property="isOsWindows">
        <os family="windows" />
    </condition>

    <condition property="isOsUnixNotMac">
        <and>
            <os family="unix" />
            <not>
                <os family="mac"/>
            </not>
        </and>
    </condition>

    <condition property="isOsMac">
        <os family="mac" />
    </condition>

    <taskdef name="jarbundler" classname="net.sourceforge.jarbundler.JarBundler" classpath="${util}/jarbundler-2.1.0.jar"/>

    <!-- if we're using a Mac then we'll use the launch4j for Mac OS -->
    <target name="checkOSMac" if="isOsMac">
        <taskdef name="launch4j" classname="net.sf.launch4j.ant.Launch4jTask" classpath="${util}/launch4j/launch4j.jar:${util}/launch4j/lib/xstream.jar" />
    </target>

    <!-- if we're using Windows then we use the launch4j for Windows -->
    <target name="checkOSWindows" if="isOsWindows">
            <taskdef name="launch4j" classname="net.sf.launch4j.ant.Launch4jTask" classpath="${util}/launch4j/launch4j.jar:${util}/launch4j/lib/xstream.jar" />
    </target>

    <!-- if we're using UNIX or Linux then we'll use the launch4j for Linux -->
    <target name="checkOSUNIX" if="isOsUnixNotMac">
        <taskdef name="launch4j" classname="net.sf.launch4j.ant.Launch4jTask" classpath="${util}/linux/launch4j/launch4j.jar:${util}/linux/launch4j/lib/xstream.jar" />
    </target>

    <target name="pkgdir-init" depends="checkOSMac, checkOSWindows, checkOSUNIX">
        <tstamp />
        <delete dir="${localdir}" />
        <delete dir="${pkgdir}" />
        <delete dir="${mm-pkgdir}" />
        <delete dir="${mml-pkgdir}" />
    </target>

    <!-- following pkgdir-* tasks get, build & package the current version from git -->
    <target name="pkgdir-get" depends="pkgdir-init" description="get the latest source from git">
        <exec executable="git">
            <arg line="clone --single-branch ${gitroot}" />
        </exec>
    	<move file="mekhq/MekHQ" tofile="${pkgdir}"/>
    	<delete dir="mekhq" />
        <!--now we need to replace our data with the latest from the MM git
            but first we need to back it up because we will need to keep a few
            things-->
        <move file="${pkgdir}/${datadir}" tofile="${pkgdir}/${datadir}-OLD"/>
    	<!-- bring in some megamek data -->
        <exec executable="git">
            <arg line="clone --single-branch ${mm-gitroot} ${mm-pkgdir}" />
        </exec>
        <!-- now bring in some mml data -->
        <exec executable="git">
            <arg line="clone --single-branch ${mml-gitroot} ${mml-pkgdir}" />
        </exec>
        <copy todir="${pkgdir}">
            <fileset dir="${mm-pkgdir}/megamek">
                <include name="data/" />
            </fileset>
        </copy>
        <!-- now add in lib files -->
        <copy todir="${pkgdir}/${libdir}">
            <fileset dir="${mm-pkgdir}/megamek/${libdir}" />
        </copy>
        <copy todir="${pkgdir}/${libdir}">
            <fileset dir="${mml-pkgdir}/${libdir}" />
        </copy>
        <!-- now add in MM and MML doc files -->
        <copy todir="${pkgdir}/${docdir}/${docmmdir}">
            <fileset dir="${mm-pkgdir}/megamek/${docdir}" />
        </copy>
        <copy todir="${pkgdir}/${docdir}/${docmmldir}">
            <fileset dir="${mml-pkgdir}/${docdir}" />
        </copy>
        <!-- grab the megameklab misc images -->
        <copy todir="${pkgdir}/${datadir}/images/misc">
            <fileset dir="${mml-pkgdir}/${datadir}/images/misc">
                <include name="megameklab.png" />
            </fileset>
        </copy>
        <!-- grab the megameklab recordsheets files -->
        <copy todir="${pkgdir}/${datadir}/images/misc">
            <fileset dir="${mml-pkgdir}/${datadir}/images">
                <include name="recordsheets/" />
            </fileset>
        </copy>
        <!-- ok now move some stuff back into data that needs to be there-->
        <copy todir="${pkgdir}/${datadir}">
            <fileset dir="${pkgdir}/${datadir}-OLD" >
                <include name="universe/" />
                <include name="fonts/" />
                <include name="mapgen/" />
     			<include name="names/bloodnames/" />
                <include name="images/force/" />
                <include name="images/portraits/" />
                <include name="images/fluff/mech/*.png" />
                <include name="images/misc/" />
                <include name="images/universe/" />
            </fileset>
        </copy>
    	<!-- grab the new graphical hits -->
        <copy todir="${pkgdir}/${datadir}/images/misc">
            <fileset dir="${pkgdir}/${datadir}-OLD/images/misc" >
                <include name="hits/" />
            </fileset>
        </copy>
        <delete dir="${pkgdir}/${datadir}-OLD" />
        <!--now we need to replace our mmconf with the latest from the MM git
            but first we need to back it up because we will need to keep a few
            things-->
        <move file="${pkgdir}/${confdir}" tofile="${pkgdir}/${confdir}-OLD"/>
        <copy todir="${pkgdir}">
            <fileset dir="${mm-pkgdir}/megamek" >
                <include name="${confdir}/" />
            </fileset>
        </copy>
        <!-- ok now move some stuff back into mmconf that needs to be there-->
        <copy todir="${pkgdir}/${confdir}">
            <fileset dir="${pkgdir}/${confdir}-OLD" >
                <include name="mekhq.properties" />
                <include name="mhqPresets/" />
            </fileset>
        </copy>
        <delete dir="${pkgdir}/${confdir}-OLD" />
    </target>

    <target name="pkgdir-build" depends="pkgdir-get" description="compile project from git and generate JAR file" >
            <mkdir dir="${pkgbuilddir}" />
            <!-- compile -->
            <echo message="MekHQ" />
            <javac debug="true" debuglevel="lines,source" target="1.7" source="1.7" encoding="UTF-8" destdir="${pkgbuilddir}" srcdir="${pkgdir}/${srcdir}" memoryInitialSize="512m" memoryMaximumSize="512m" fork="true">
                <classpath>
                    <pathelement location="${pkgdir}" />
                    <fileset dir="${pkgdir}/${libdir}" includes="*.jar" />
                    <fileset dir="${pkgdir}" includes="MegaMek.jar" />
                    <fileset dir="${pkgdir}" includes="MegaMekLab.jar" />
                </classpath>
            </javac>

            <!-- jar -->
            <jar basedir="${pkgbuilddir}" jarfile="${pkgdir}/${jarfile}" manifest="manifest.txt">
                <fileset dir="${pkgdir}/${srcdir}" includes="**/*.properties"/>
            </jar>

            <!-- Ensure that the log directory exists. -->
            <mkdir dir="${pkgdir}/${logdir}" />
            <touch file="${pkgdir}/${timestampfile}" />
        </target>

        <target name="pkgdir-clean" description="remove the git build directory">
            <delete dir="${pkgbuilddir}" />
            <delete dir="${pkgdir}" />
            <delete dir="${mm-pkgdir}" />
            <delete dir="${mml-pkgdir}" />
        </target>

    <target name="mac-bundle" description="Bundle the project built from git into an Mac OSX distribution">
        <mkdir dir="${osxdist}" />
        <copy todir="${osxdist}">
            <fileset dir="${pkgdir}" >
                <include name="${logdir}/" />
                <include name="${datadir}/" />
                <include name="${docdir}/" />
                <include name="${confdir}/" />
                <include name="campaigns/" />
                <include name="*README.html" />
                <include name="SubmitBug.html" />
                <include name="license.txt" />
                <exclude name="**/*.psd"/>
            </fileset>
        </copy>
        <mkdir dir="${osxdist}/MegaMek.app" />
        <copy todir="${osxdist}/MegaMek.app">
            <fileset dir="${util}/MegaMek.app" >
                <include name="**/*"/>
            </fileset>
        </copy>
        <copy file="${util}/JavaApplicationStub" todir="${osxdist}/MegaMek.app/Contents/MacOS/"/>
        <mkdir dir="${osxdist}/MegaMekLab.app" />
        <copy todir="${osxdist}/MegaMekLab.app">
            <fileset dir="${util}/MegaMekLab.app" >
                <include name="**/*"/>
            </fileset>
        </copy>
        <copy file="${util}/JavaApplicationStub" todir="${osxdist}/MegaMekLab.app/Contents/MacOS/"/>
        <mkdir dir="${osxdist}/MekHQ.app" />
        <copy todir="${osxdist}/MekHQ.app">
            <fileset dir="${util}/MekHQ.app" >
                <include name="**/*"/>
            </fileset>
        </copy>
        <copy file="${util}/JavaApplicationStub" todir="${osxdist}/MekHQ.app/Contents/MacOS/"/>
        <copy todir="${osxdist}/MekHQ.app/Contents/Resources/Java/">
            <fileset dir="${pkgdir}" >
                <include name="${libdir}/*.jar" />
                <include name="${jarfile}" />
                <include name="MegaMekLab.jar" />
                <include name="MegaMek.jar" />
            </fileset>
        </copy>
    </target>

    <!-- Replace actual stubs with symlinks on mac systems -->
    <target name="mac-stub" if="isOsMac" description="Create a dmg file from the OS X distribution (NOTE: only works on OSX)">
        <!-- <delete file="${osxdist}/MekHQ.app/Contents/MacOS/JavaApplicationStub" />
        <exec executable="ln">
            <arg line="-s /System/Library/Frameworks/JavaVM.framework/Resources/MacOS/JavaApplicationStub" />
            <arg value="${osxdist}/MekHQ.app/Contents/MacOS/JavaApplicationStub" />
        </exec>
        <delete file="${osxdist}/MegaMek.app/Contents/MacOS/JavaApplicationStub" />
        <exec executable="ln">
            <arg line="-s /System/Library/Frameworks/JavaVM.framework/Resources/MacOS/JavaApplicationStub" />
            <arg value="${osxdist}/MegaMek.app/Contents/MacOS/JavaApplicationStub" />
        </exec> -->
    </target>

    <target name="mac-zip">
        <tar destfile="${osxdist}.tar.bz2" compression="bzip2" longfile="gnu">
            <tarfileset dir="${osxdist}" mode="755" />
        </tar>
    </target>

    <target name="mac-tar" depends="mac-stub,mac-zip" description="Create a compressed tar file of the OS X distribution"/>

    <target name="mac-clean">
        <delete dir="${osxdist}" />
    </target>

    <target name="mac-package" depends="mac-bundle, mac-tar, mac-clean" description="Package a Mac OS X distribution of the project built from git" />

    <target name="nix-bundle" description="Bundle the project built from git into a unix distribution">
        <mkdir dir="${nixdist}" />
        <mkdir dir="${nixdist}/${nixdist}" />
        <copy todir="${nixdist}/${nixdist}">
            <fileset dir="${pkgdir}" >
                <include name="${jarfile}" />
                <include name="${libdir}/*.jar" />
                <include name="${logdir}/" />
                <include name="${datadir}/" />
                <include name="${docdir}/" />
                <include name="${confdir}/" />
                <include name="campaigns/" />
                <include name="MegaMek.jar" />
                <include name="MegaMekLab.jar" />
                <include name="*README.html" />
                <include name="SubmitBug.html" />
                <include name="license.txt" />
                <include name="*.sh" />
                <exclude name="**/*.psd"/>
            </fileset>
        </copy>
    </target>

    <target name="nix-tar" description="Create a compressed tar file of the unix distribution">
        <tar destfile="${nixdist}.tar.gz" basedir="${nixdist}" compression="gzip" longfile="gnu" />
    </target>

    <target name="nix-clean">
        <delete dir="${nixdist}" />
    </target>

    <target name="nix-package" depends="nix-bundle, nix-tar, nix-clean" description="Package a Unix distribution of the project built from git"/>

    <!-- Produce an EXE file -->
    <target name="exe" description="Generate an EXE wrappers for MekHQ.jar, MegaMek.jar, and MegaMekLab.jar">
        <copy file="${pkgdir}/MegaMek.jar" tofile="${pkgdir}/lib/MegaMek.jar"/>
        <copy file="${pkgdir}/MegaMekLab.jar" tofile="${pkgdir}/lib/MegaMekLab.jar"/>
        <delete file="${pkgdir}/MekHQ.exe"/>
        <launch4j configFile="${util}/mekhq.4j.xml" />
        <delete file="${pkgdir}/MegaMek.exe"/>
        <launch4j configFile="${util}/megamek.4j.xml" />
        <delete file="${pkgdir}/MegaMekLab.exe"/>
        <launch4j configFile="${util}/megameklab.4j.xml" />
    </target>

    <target name="win-bundle" depends="exe" description="Bundle the project built from git into a Windows distribution">
        <mkdir dir="${windist}" />
        <copy todir="${windist}">
            <fileset dir="${pkgdir}" >
                <include name="${libdir}/*.jar" />
                <include name="${logdir}/" />
                <include name="${datadir}/" />
                <include name="${docdir}/" />
                <include name="${confdir}/" />
                <include name="campaigns/" />
                <!--<include name="MegaMek.jar" />
                <include name="MegaMekLab.jar" />-->
                <include name="MegaMek.exe" />
                <include name="MegaMekLab.exe" />
                <include name="MekHQ.exe" />
                <include name="*README.html" />
                <include name="SubmitBug.html" />
                <include name="license.txt" />
                <exclude name="**/*.psd"/>
            </fileset>
        </copy>
        <copy file="${util}/mekhq.l4j.ini" todir="${windist}"/>
        <copy file="${util}/megamek.l4j.ini" todir="${windist}"/>
        <copy file="${util}/megameklab.l4j.ini" todir="${windist}"/>
    </target>

    <target name="win-zip" description="Create a zipfile of the Windows distribution">
        <zip zipfile="${basedir}/${windist}.zip" basedir="${windist}"  />
    </target>

    <target name="win-clean">
        <delete dir="${windist}" />
        <delete file="${pkgdir}/lib/MegaMek.jar" />
        <delete file="${pkgdir}/lib/MegaMekLab.jar" />
    </target>

    <target name="win-package" depends="win-bundle, win-zip, win-clean" description="Package a Windows distribution of the project built from git"/>

    <target name="source-package" description="Package a source-only distribution of the project built from git">
        <mkdir dir="${srcdist}" />
        <mkdir dir="${srcdist}/${srcdist}" />
        <copy todir="${srcdist}/${srcdist}">
            <fileset dir="${pkgdir}" >
                <exclude name="${builddir}/**"/>
                <exclude name="MekHQ.jar"/>
                <exclude name="**/*.exe"/>
            </fileset>
        </copy>
        <tar destfile="${srcdist}.tar.gz" basedir="${srcdist}" compression="gzip"  longfile="gnu">
        </tar>
        <delete dir="${srcdist}" />
    </target>

    <target name="unitfiles-zip" description="Create a zipfile of the Mech datafiles">
        <zip zipfile="${pkgdir}/${datadir}/mechfiles/battlearmor.zip" basedir="${pkgdir}/${datadir}/mechfiles/battlearmor" />
        <zip zipfile="${pkgdir}/${datadir}/mechfiles/convfighter.zip" basedir="${pkgdir}/${datadir}/mechfiles/convfighter" />
        <zip zipfile="${pkgdir}/${datadir}/mechfiles/dropships.zip" basedir="${pkgdir}/${datadir}/mechfiles/dropships" />
        <zip zipfile="${pkgdir}/${datadir}/mechfiles/fighters.zip" basedir="${pkgdir}/${datadir}/mechfiles/fighters" />
        <zip zipfile="${pkgdir}/${datadir}/mechfiles/ge.zip" basedir="${pkgdir}/${datadir}/mechfiles/ge" />
        <zip zipfile="${pkgdir}/${datadir}/mechfiles/infantry.zip" basedir="${pkgdir}/${datadir}/mechfiles/infantry" />
        <zip zipfile="${pkgdir}/${datadir}/mechfiles/jumpships.zip" basedir="${pkgdir}/${datadir}/mechfiles/jumpships" />
        <zip zipfile="${pkgdir}/${datadir}/mechfiles/mechs.zip" basedir="${pkgdir}/${datadir}/mechfiles/mechs" />
        <zip zipfile="${pkgdir}/${datadir}/mechfiles/protomechs.zip" basedir="${pkgdir}/${datadir}/mechfiles/protomechs" />
        <zip zipfile="${pkgdir}/${datadir}/mechfiles/smallcraft.zip" basedir="${pkgdir}/${datadir}/mechfiles/smallcraft" />
        <zip zipfile="${pkgdir}/${datadir}/mechfiles/spacestation.zip" basedir="${pkgdir}/${datadir}/mechfiles/spacestation" />
        <zip zipfile="${pkgdir}/${datadir}/mechfiles/unofficial.zip" basedir="${pkgdir}/${datadir}/mechfiles/unofficial" />
        <zip zipfile="${pkgdir}/${datadir}/mechfiles/vehicles.zip" basedir="${pkgdir}/${datadir}/mechfiles/vehicles" />
        <zip zipfile="${pkgdir}/${datadir}/mechfiles/warship.zip" basedir="${pkgdir}/${datadir}/mechfiles/warship" />
        <delete dir="${pkgdir}/${datadir}/mechfiles/battlearmor" />
        <delete dir="${pkgdir}/${datadir}/mechfiles/convfighter" />
        <delete dir="${pkgdir}/${datadir}/mechfiles/dropships" />
        <delete dir="${pkgdir}/${datadir}/mechfiles/fighters" />
        <delete dir="${pkgdir}/${datadir}/mechfiles/ge" />
        <delete dir="${pkgdir}/${datadir}/mechfiles/infantry" />
        <delete dir="${pkgdir}/${datadir}/mechfiles/jumpships" />
        <delete dir="${pkgdir}/${datadir}/mechfiles/mechs" />
        <delete dir="${pkgdir}/${datadir}/mechfiles/protomechs" />
        <delete dir="${pkgdir}/${datadir}/mechfiles/smallcraft" />
        <delete dir="${pkgdir}/${datadir}/mechfiles/spacestation" />
        <delete dir="${pkgdir}/${datadir}/mechfiles/unofficial" />
        <delete dir="${pkgdir}/${datadir}/mechfiles/vehicles" />
        <delete dir="${pkgdir}/${datadir}/mechfiles/warship" />
    </target>

	<target name="rat-zip" description="Create a zipfile of the RAT files">
		<zip zipfile="${pkgdir}/${datadir}/rat_default.zip" basedir="${pkgdir}/${datadir}/rat" />
		<delete dir="${pkgdir}/${datadir}/rat" />
		<sleep seconds="1" /> <!-- give the file system time to catch up -->
		<mkdir dir="${pkgdir}/${datadir}/rat" />
		<move file="${pkgdir}/${datadir}/rat_default.zip" tofile="${pkgdir}/${datadir}/rat/default.zip" />
	</target>

    <target name="release" depends="pkgdir-build, unitfiles-zip, rat-zip, mac-package, nix-package, win-package, source-package, pkgdir-clean" description="Build the project from git and package it as Windows, Mac, Unix, and source-only" />

    <target name="mac-release" depends="pkgdir-build, mac-package, pkgdir-clean" description="Build the project from local source and package it as Mac" />

    <target name="win-release" depends="pkgdir-build, win-package, pkgdir-clean" description="Build the project from local source and package it as Windows" />

    <target name="nix-release" depends="pkgdir-build, nix-package, pkgdir-clean" description="Build the project from local source and package it as Unix" />

    <target name="src-release" depends="pkgdir-build, source-package, pkgdir-clean" description="Build the project from local source and package it as source-only" />

</project>
