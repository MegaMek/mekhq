import java.time.LocalDateTime

plugins {
    id 'application'
    id 'com.palantir.git-version' version '3.3.0'
    id 'edu.sc.seis.launch4j' version '3.0.6'
    id "io.sentry.jvm.gradle" version '5.7.0'
    id 'jacoco'
    id 'java'
    id 'checkstyle'
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

sourceSets {
    main {
        java {
            srcDirs = ['src']
        }
        resources {
            srcDirs = ['resources']
        }
    }
    test {
        java {
            srcDirs = ['unittests']
        }
        resources {
            srcDirs = ['testresources']
        }
    }
}

ext {
    mhqJvmOptions = [
            '-Xmx4096m',
            '--add-opens',
            'java.base/java.util=ALL-UNNAMED',
            '--add-opens',
            'java.base/java.util.concurrent=ALL-UNNAMED',
            '-Dsun.awt.disablegrab=true'
    ]
    campaigns = 'campaigns'
    data = 'data'
    docs = 'docs'
    lib = 'lib'
    log = 'logs'
    mmconf = 'mmconf'
    userdata = 'userdata'
    fileStagingDir = "${layout.buildDirectory.get()}/files"
    scriptsDir = "${projectDir}/scripts"

    mmDir = "${rootDir}/../megamek"
    mmlDir = "${rootDir}/../megameklab"
}

dependencies {
    implementation "org.megamek:megamek:${version}"
    implementation("org.megamek:megameklab:${version}") {
        // We don't need the python and javascript engine taking up space
        exclude group: 'org.python', module: 'jython'
        exclude group: 'org.mozilla', module: 'rhino'

        // Eclipse IDE Multiple Dependency errors.
        exclude group: 'xml-apis'
    }

    implementation 'jakarta.xml.bind:jakarta.xml.bind-api:4.0.2'

    implementation 'javax.vecmath:vecmath:1.5.2'

    implementation 'joda-time:joda-time:2.14.0'
    implementation 'org.joda:joda-money:1.0.6' // Has a 2.0.2 Version

    implementation 'org.apache.commons:commons-csv:1.14.0'
    implementation 'org.apache.commons:commons-math3:3.6.1'
    implementation 'org.apache.commons:commons-text:1.13.1'
    implementation 'org.apache.logging.log4j:log4j-core:2.24.3'

    implementation 'org.commonmark:commonmark:0.24.0'

    implementation 'org.jfree:jfreechart:1.5.6'

    implementation 'com.fasterxml.jackson.core:jackson-core:2.19.0'
    implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.19.0'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.19.0'

    runtimeOnly 'org.glassfish.jaxb:jaxb-runtime:4.0.5'

    // Required for mml printing scaled vector graphics (SVG) - Eclipse IDE Compatibility.
    runtimeOnly 'xml-apis:xml-apis-ext:1.3.04'

    testRuntimeOnly 'org.junit.platform:junit-platform-launcher:1.13.0'

    testImplementation 'org.junit.jupiter:junit-jupiter:5.13.0'
    testImplementation 'org.mockito:mockito-core:5.18.0'
    testImplementation 'org.mockito:mockito-junit-jupiter:5.18.0'
}

application {
    mainClass = 'mekhq.MekHQ'
    applicationDefaultJvmArgs = [
            '-Xmx4096m',
            '--add-opens',
            'java.base/java.util=ALL-UNNAMED',
            '--add-opens',
            'java.base/java.util.concurrent=ALL-UNNAMED',
            '-Dsun.awt.disablegrab=true'
    ]
}

run {
    jvmArgs = mhqJvmOptions
}

jar {
    archiveFileName = "MekHQ.jar"

    manifest {
        attributes "Main-Class": application.mainClass
        attributes "Class-Path": "MegaMek.jar MegaMekLab.jar " + (project.sourceSets.main.runtimeClasspath.files
                .findAll { it.name.endsWith(".jar") && !it.name.toLowerCase().startsWith("megamek") }
                .collect { "${lib}/${it.name}" }.join(' '))
        attributes "Add-Opens": 'java.base/java.util java.base/java.util.concurrent'
        attributes "Build-Date": LocalDateTime.now()
        attributes "Sealed": true
    }
}

checkstyle {
    toolVersion = '10.25.0'
    configFile = file("${rootDir}/config/checkstyle/checkstyle.xml")
    configProperties = [
            'suppressionFile': file("${rootDir}/config/checkstyle/checkstyle-suppressions.xml")
    ]
    maxWarnings = 0  // Fail on any warning
    maxErrors = 0    // Fail on any error
}

tasks.withType(Checkstyle).configureEach {
    minHeapSize = "1g"
    maxHeapSize = "4g"
}

tasks.register('generateDynamicFiles') {
    def jvmOptions = project.ext.mhqJvmOptions.join('\n')

    doLast {
        new File("${projectDir}/docs/mhq-revision.txt").text = versionDetails().gitHashFull
        new File("${projectDir}/MekHQ.l4j.ini").text = """# Launch4j runtime config
# you can add arguments here that will be processed by the JVM at runtime
${jvmOptions}
"""
    }
}

tasks.register('canonSystemZip', Zip) {
    description = 'Creates a zip archive of canon planetary systems.'
    from "${data}/universe/planetary_systems/canon_systems/"

    archiveFileName = "canon_systems.zip"
    destinationDirectory = file("${fileStagingDir}/${data}/universe/planetary_systems")
    inputs.dir "${data}/universe/planetary_systems/canon_systems/"
    outputs.dir "${fileStagingDir}/${data}/universe/planetary_systems"
}

tasks.register('connectorSystemZip', Zip) {
    description = 'Creates a zip archive of connector systems planetary systems.'
    from "${data}/universe/planetary_systems/connector_systems/"

    archiveFileName = "connector_systems.zip"
    destinationDirectory = file("${fileStagingDir}/${data}/universe/planetary_systems")
    inputs.dir "${data}/universe/planetary_systems/connector_systems/"
    outputs.dir "${fileStagingDir}/${data}/universe/planetary_systems"
}

tasks.register("copyLicenseFiles", Sync) {
    description = "Copy the license files to the root of the folder."
    group = 'build'
    from "../"
    into fileStagingDir

    includes = [
            'LICENSE',
            'LICENSE.code',
            'LICENSE.assets',
            'README.md'
    ]

}

tasks.register('stageFiles', Copy) {
    description = 'Stages files that are to be copied into the distribution.'

    dependsOn gradle.includedBuild('megamek').task(':megamek:generateDynamicFiles')
    dependsOn gradle.includedBuild('megameklab').task(':megameklab:generateDynamicFiles')
    dependsOn generateDynamicFiles
    dependsOn copyLicenseFiles

    dependsOn canonSystemZip
    dependsOn connectorSystemZip

    from projectDir
    include "${campaigns}/"
    include "${data}/fonts/"
    include "${data}/universe/"
    include "${data}/mapgen/"
    include "${data}/names/bloodnames/"
    include "${data}/images/awards/"
    include "${data}/images/force/"
    include "${data}/images/portraits/"
    include "${data}/images/fluff/Mek/*.png"
    include "${data}/images/misc/"
    include "${data}/images/stratcon/"
    include "${data}/images/universe/"
    include "${data}/images/storysplash/"
    include "${data}/randomEvents/"
    include "${data}/campaignPresets/"
    include "${data}/scenariomodifiers/"
    include "${data}/scenariotemplates/"
    include "${data}/stratconbiomedefinitions/"
    include "${data}/stratconcontractdefinitions/"
    include "${data}/stratconfacilities/"
    include "${data}/storyarcs/"
    include "${data}/terrainconditionsodds/"
    include "${docs}/**"
    include "${mmconf}/**"
    include "${userdata}"
    include "${userdata}/data/universe/"
    include 'SubmitBug.html'
    include "sentry.properties"
    include "*.ini"

    // User Config Files
    exclude "${mmconf}/clientsettings.xml"
    exclude "${mmconf}/gameoptions.xml"
    exclude "${mmconf}/megameklab.properties"
    exclude "${mmconf}/megameklab.properties.bak"
    exclude "${mmconf}/mhq.preferences"
    exclude "${mmconf}/mm.preferences"
    exclude "${mmconf}/mml.preferences"

    // Planetary Systems
    exclude "${data}/universe/planetary_systems/canon_systems/"
    exclude "${data}/universe/planetary_systems/connector_systems/"

    into fileStagingDir

    doLast {
        mkdir "${fileStagingDir}/${log}"
        mkdir "${fileStagingDir}/${userdata}/${data}/campaignPresets/"
    }
}

tasks.register('createStartScripts', CreateStartScripts) {
    description = 'Create shell script for generic distribution.'

    applicationName = 'MekHQ'
    mainClass = application.mainClass
    outputDir = startScripts.outputDir
    classpath = jar.outputs.files + files(project.sourceSets.main.runtimeClasspath.files)
            .filter { it.name.endsWith(".jar") }
}

distributions {
    main {
        distributionBaseName = 'MekHQ'
        contents {
            // MegaMek Includes
            from("${mmDir}/megamek/build/files")
            from("${mmDir}/megamek/build/scripts") {
                into "bin"
            }
            from("${mmDir}/megamek/scripts") {
                include "shell.sh"
                rename "shell.sh", "MegaMek.sh"
            }
            from("${mmDir}/megamek/docs") {
                rename 'history.txt', 'mm-history.txt'
                into 'docs'
            }
            from("${mmDir}/megamek/mmconf/log4j2.xml") {
                exclude 'log4j2.xml'
            }
            from("${mmDir}/megamek/build/launch4j/lib") {
                into "${lib}"
            }
            from("${mmDir}/megamek/build/launch4j") {
                include '*.exe'
            }
            from("${mmDir}/megamek/build/libs/MegaMek.jar") {
                into "${lib}"
            }
            from("${mmDir}/megamek/build/libs/MegaMek.jar")
            from("${mmDir}/megamek/") {
                include '*.ini'
            }

            // MegaMekLab Includes
            from("${mmlDir}/megameklab/build/files") {
                exclude 'data/mekfiles'
            }
            from("${mmlDir}/megameklab/build/launch4j/lib") {
                into "${lib}"
            }
            from("${mmlDir}/megameklab/build/files/${data}/images") {
                into "${data}/images"
            }
            from("${mmlDir}/megameklab/build/scripts") {
                into "bin"
            }
            from("${mmlDir}/megameklab/scripts") {
                include "shell.sh"
                rename "shell.sh", "MegaMekLab.sh"
            }
            from("${mmlDir}/megameklab/docs") {
                rename 'history.txt', 'mml-history.txt'
                into "${docs}"
            }
            from("${mmlDir}/megameklab/mmconf/log4j2.xml") {
                exclude 'log4j2.xml'
            }
            from("${mmlDir}/megameklab/build/launch4j") {
                include '*.exe'
            }
            from("${mmlDir}/megameklab/build/libs/MegaMekLab.jar") {
                into "${lib}"
            }
            from("${mmlDir}/megameklab/build/libs/MegaMekLab.jar")
            from("${mmlDir}/megameklab/") {
                include '*.ini'
            }

            // MekHQ Includes
            from("docs/history.txt") {
                rename 'history.txt', 'mhq-history.txt'
                into 'docs'
            }
            from(fileStagingDir) {
                exclude 'history.txt'
            }
            from("${projectDir}/scripts") {
                include 'shell.sh'
                rename 'shell.sh', 'MekHQ.sh'
            }
            from("${buildDir}/launch4j") {
                include '*.exe'
            }

            from(project.sourceSets.main.runtimeClasspath.files
                    .findAll { it.name.endsWith(".jar") && !it.name.toLowerCase().startsWith("megamek") }) {
                into "${lib}"
            }
            from(jar) {
                into "${lib}"
            }
            from(jar)

            duplicatesStrategy = 'exclude'
        }
    }
}

launch4j {
    description = 'Create Windows executable for MekHQ'
    mainClassName = application.mainClass
    icon = "${projectDir}/data/images/misc/mekhq.ico"
    outfile = "MekHQ.exe"
    jarTask = project.tasks.jar
    windowTitle = 'MekHQ'
    internalName = 'MekHQ'
    downloadUrl = 'https://github.com/MegaMek/megamek/wiki/Updating-to-Adoptium-(Eclipse-Temurin-Open-Source-Java)'
    supportUrl = 'https://megamek.org'
    copyright = '2025 MegaMek Development Team.'
    trademarks = 'MechWarrior, BattleMech, `Mech and AeroTech - The The Topps Company, Inc. Catalyst Game Labs - InMediaRes Productions, LLC.'
    companyName = "MegaMek Development Team"
    jreMinVersion = '17'
    dontWrapJar = true
    messagesJreVersionError = 'We require a Java Runtime of version 17 or higher installed. https://github.com/MegaMek/megamek/wiki/Updating-to-Adoptium-(Eclipse-Temurin-Open-Source-Java)'
    messagesJreNotFoundError = 'Go here for instructions on installing the correct version of Java: https://github.com/MegaMek/megamek/wiki/Updating-to-Adoptium-(Eclipse-Temurin-Open-Source-Java)'
}

tasks.register("packagePrepWork") {
    description = 'General Catch All for all distributions'
    dependsOn jar
    dependsOn stageFiles
    dependsOn startScripts
    dependsOn createStartScripts
    dependsOn createAllExecutables

    dependsOn gradle.includedBuild('megamek').task(':megamek:stageFiles')
    dependsOn gradle.includedBuild('megameklab').task(':megameklab:stageFiles')

    dependsOn gradle.includedBuild('megamek').task(':megamek:startScripts')
    dependsOn gradle.includedBuild('megameklab').task(':megameklab:startScripts')

    dependsOn gradle.includedBuild('megamek').task(':megamek:createStartScripts')
    dependsOn gradle.includedBuild('megameklab').task(':megameklab:createStartScripts')

    dependsOn gradle.includedBuild('megamek').task(':megamek:createAllExecutables')
    dependsOn gradle.includedBuild('megameklab').task(':megameklab:createAllExecutables')
}

distTar {
    description = 'Creates distribution packaged as a GZipped tar ball'
    dependsOn packagePrepWork
    archiveExtension = 'tar.gz'
    compression = Compression.GZIP
}

distZip {
    description = 'Creates distribution packaged as a ZIP File'
    enabled = false
    dependsOn packagePrepWork
}

assemble {
    dependsOn jar
}

assembleDist {
    description = 'Build unix, Windows, and source packages'
    group = 'distribution'
    dependsOn stageFiles
    dependsOn distTar
}

tasks.register("buildAllPackages", Copy) {
    dependsOn gradle.includedBuild('megamek').task(':megamek:assembleDist')
    dependsOn gradle.includedBuild('megameklab').task(':megameklab:assembleDist')
    dependsOn assembleDist
    group = "distribution"

    into layout.buildDirectory.dir("distributions")
    from("${mmDir}/megamek/build/distributions") {
        include "*.tar.gz"
    }
    from("${mmlDir}/megameklab/build/distributions") {
        include "*.tar.gz"
    }
}

tasks.register("cleanAll") {
    description = "Cleans all build projects to ensure a clean slate"
    group = "build"
    dependsOn gradle.includedBuild('megamek').task(':megamek:clean')
    dependsOn gradle.includedBuild('megameklab').task(':megameklab:clean')
    dependsOn clean
}

tasks.register("testAll") {
    description = "Cleans all build projects to ensure a clean slate then runs all tests"
    group = "verification"
    dependsOn cleanAll

    dependsOn gradle.includedBuild('megamek').task(':megamek:test')
    dependsOn gradle.includedBuild('megameklab').task(':megameklab:test')
    dependsOn test
}


test {
    useJUnitPlatform()
    dependsOn(checkstyleMain)
    // report is always generated after tests run
    finalizedBy jacocoTestReport
}

jacocoTestReport {
    // tests are required to run before generating the report
    dependsOn test
    reports {
        xml.required = true
        html.required = true
    }
}
